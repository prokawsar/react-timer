{"version":3,"sources":["Components/Timer.js","Components/Header.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["Timer","react_default","a","createElement","mdbreact","label","icon","group","type","color","Component","Header","className","src","logo","alt","App","Components_Header","Components_Timer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"uOAqBeA,mLAfP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOC,MAAM,kBAAkBC,KAAK,WAAWC,OAAK,EAACC,KAAK,UAC1DP,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOC,MAAM,qBAAqBC,KAAK,OAAOC,OAAK,EAACC,KAAK,aACzDP,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQK,MAAM,UAAd,kBAPAC,6BCWLC,mLAVP,OACAV,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cACdX,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCd,EAAAC,EAAAC,cAAA,MAAIS,UAAU,aAAd,sCALSF,aCyBNM,0LAlBX,OACEf,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACfX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACfX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,YAEXX,EAAAC,EAAAC,cAACe,EAAD,iBAVIR,cCEZS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,uBCtEjEC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDWlC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEP7B,GAiDV,SAAiCO,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BT,OAAOC,SAASsC,aAKpBnC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAsB,CAAwBnC,GAIxBC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCtCxBoC,sBCVAC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e262648e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { FormInline, Button, Input } from 'mdbreact';\r\n\r\nclass Timer extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <FormInline>\r\n                    <Input label=\"Type your email\" icon=\"envelope\" group type=\"email\" />\r\n                    <Input label=\"Type your password\" icon=\"lock\" group type=\"password\" />\r\n                    <Button color=\"danger\">Login</Button>\r\n                </FormInline>\r\n\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return(\r\n        <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1 className=\"App-title\">Welcome to React Timer App</h1>\r\n        </header>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Timer from './Components/Timer'\nimport Header from './Components/Header'\nimport './App.css';\n\nimport { Button, Card, CardBody, CardImage, CardTitle, CardText } from 'mdbreact';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-2\"></div>\n          <div className=\"col-md-8\">\n              {/* timer code goes here  */}\n              <Timer />\n          </div>\n        </div>\n      </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}